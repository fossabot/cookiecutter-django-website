"""
Django settings for FastRate project.
Generated by 'django-admin startproject' using Django 1.8.7.
For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import logging
import os
import socket
from pathlib import Path

import environ
from datetime import timedelta

logging.debug("Importing: %s" % __file__)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
ROOT_DIR = os.path.dirname(BASE_DIR)

env = environ.Env()

# This is defined here as a do-nothing function because we can't import
# django.utils.translation -- that module depends on the settings.
# https://docs.djangoproject.com/en/1.9/topics/i18n/translation/#marking-strings-as-no-op
gettext_noop = lambda s: s

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', bool, False)
ENVIRONMENT_NAME = env('ENVIRONMENT_NAME', default='')

SITE_ID = 1
BASE_URL = "http://dev.example.com:5555"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_PROJECT_ID = env('GOOGLE_STORAGE_ID')
from google.oauth2 import service_account

GS_CREDENTIALS = service_account.Credentials.from_service_account_info({
    'token_uri': 'https://accounts.google.com/o/oauth2/token',
    'client_email': env('GOOGLE_STORAGE_USER'),
    'private_key_id': env('GOOGLE_STORAGE_ID'),
    'private_key': env('GOOGLE_STORAGE_KEY', lambda s: bytes(s, 'UTF-8').decode('unicode_escape')),
})
GS_BUCKET_NAME = env('GOOGLE_STORAGE_BUCKET')


INTERNAL_IPS = [
    '127.0.0.1',
]

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '.example.com',
    'vagrant',
]

if 'ALLOWED_HOSTS' in os.environ:
    hosts = os.environ['ALLOWED_HOSTS'].split(" ")
    BASE_URL = "https://" + hosts[0]
    for host in hosts:
        host = host.strip()
        if host:
            ALLOWED_HOSTS.append(host)

SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=False)

HOSTNAME = socket.gethostname().lower()

ADMINS = (
    ("Janusz Skonieczny", "janusz@your.hr"),
)
DEFAULT_FROM_EMAIL = "Your.HR <help@your.hr>"
SERVER_EMAIL = "{} Errors <errors@your.hr>".format(HOSTNAME)
EMAIL_SUBJECT_PREFIX = env('EMAIL_SUBJECT_PREFIX', default='[FR] ')
ERR_EMAIL = "err@your.hr"

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'debug_toolbar',
    'rest_framework',
    'rest_framework.authtoken',
    'django_assets',
    'bootstrapform',
    'django_babel',
    'storages',
    'guardian',
    'reversion',
    'django_filters',
    'django_powerbank',
    'localflavor',
    'django_gravatar',
    'social_django',
    'import_export',
    'raven.contrib.django.raven_compat',
    'misc.choose_language',
    '{{ cookiecutter.app_name }}.apps.{{ cookiecutter.app_config_name }}',
)

MIDDLEWARE_CLASSES = (
    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',
    # 'django.middleware.security.SecurityMiddleware',  # TODO: Do we need that? https://docs.djangoproject.com/en/1.10/ref/middleware/#django.middleware.security.SecurityMiddleware
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django_babel.middleware.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',  # https://docs.djangoproject.com/en/1.9/topics/i18n/translation/#how-django-discovers-language-preference
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'misc.middleware.XHeadersMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'resume.middleware.ResumeMiddleware',
    'jobs.middleware.JobPositionsMiddleware',
    'resume.sidebar.SidebarMiddleware',
    'misc.context_processors.SystemInfoMiddleware',  # TODO: move to more sensible place
)

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        # https://docs.djangoproject.com/en/1.9/topics/templates/#django.template.backends.jinja2.Jinja2
        'BACKEND': 'dinja2.backend.Jinja2Engine',
        'DIRS': [
            os.path.join(ROOT_DIR, 'templates'),
            os.path.join(ROOT_DIR, "templates", "errors"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': {
                'website.settings.jinja2.environment': {
                    # # Match the template names ending in .html but not the ones in the admin folder.
                    # "match_extension": ".html",
                    # "app_dirname": "jinja2",
                    # # Can be set to "jinja2.Undefined" or any other subclass.
                    # "undefined": "jinja2.Undefined",
                    # "newstyle_gettext": True,
                    # "tests": {},
                    # "filters": {},
                    # "globals": {},
                    # "constants": {},
                    # "extensions": [
                    #     "jinja2.ext.do",
                    #     "jinja2.ext.loopcontrols",
                    #     "jinja2.ext.with_",
                    #     "jinja2.ext.i18n",
                    #     "jinja2.ext.autoescape",
                    #     "django_jinja.builtins.extensions.CsrfExtension",
                    #     "django_jinja.builtins.extensions.CacheExtension",
                    #     "django_jinja.builtins.extensions.TimezoneExtension",
                    #     "django_jinja.builtins.extensions.UrlsExtension",
                    #     "django_jinja.builtins.extensions.StaticFilesExtension",
                    #     "django_jinja.builtins.extensions.DjangoFiltersExtension",
                    # ],
                    # "bytecode_cache": {
                    #     "name": "default",
                    #     "backend": "django_jinja.cache.BytecodeCache",
                    #     "enabled": False,
                    # },
                    # "autoescape": True,
                    # "auto_reload": DEBUG,
                    # "translation_engine": "django.utils.translation",
                }
            },
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.csrf',
                # 'django.template.context_processors.i18n',
                'django.template.context_processors.tz',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'website.settings.context_processor',
            ],
        },
    },
    {
        # https://docs.djangoproject.com/en/1.8/topics/templates/#django.template.backends.django.DjangoTemplates
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [
        #     os.path.join(ROOT_DIR, 'templates'),
        #     os.path.join(ROOT_DIR, "templates", "errors"),
        # ],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',

            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'django.template.loaders.eggs.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'

FIXTURE_DIRS = [os.path.join(ROOT_DIR, 'fixtures')]

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

if "DATABASE_URL" in os.environ:  # pragma: no cover
    # Enable database config through environment
    DATABASES = {
        'default': env.db(),  # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    }

    # Make sure we use GIS enables engine
    DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'
    DATABASES['default']['TEST'] = {'NAME': env("DATABASE_TEST_NAME", default=None)}
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=gis,public,pg_catalog',
        'sslmode': 'require',
    }
else:
    DATABASES = {
        'default': {
            # 'ENGINE': 'django.db.backends.sqlite3',
            'ENGINE': 'django.contrib.gis.db.backends.spatialite',
            'NAME': os.path.join(ROOT_DIR, 'data', 'db.dev.sqlite3'),
            'TEST': {
                'NAME': os.path.join(ROOT_DIR, 'data', 'db.test.sqlite3'),
            }
        }
    }

# The email backend to use. For possible shortcuts see django.core.mail.
# The default is to use the SMTP backend.
# Third-party backends can be specified by providing a Python path
# to a module that defines an EmailBackend class.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# https://github.com/joke2k/django-environ#email-settings
EMAIL_CONFIG = env.email_url('EMAIL_URL')
vars().update(EMAIL_CONFIG)

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en'
LANGUAGES = (
    ('en', gettext_noop('English')),
    ('pl', gettext_noop('Polish')),
)
TIME_ZONE = 'Europe/Warsaw'
USE_I18N = True

# https://docs.djangoproject.com/en/1.9/topics/i18n/translation/#how-django-discovers-language-preference
import pycountry
LOCALE_PATHS = [
    os.path.join(ROOT_DIR, 'locale'),
    str(Path(pycountry.__file__).parent / 'locales'),
]

USE_L10N = True
USE_TZ = True

# Python module path where user will place custom format definition.
# The directory where this setting is pointing should contain subdirectories
# named as the locales, containing a formats.py file
# (i.e. "myproject.locale" for myproject/locale/en/formats.py etc. use)
FORMAT_MODULE_PATH = [
    'website.locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = BASE_URL + '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(ROOT_DIR, 'media')
STATIC_ROOT = os.path.join(ROOT_DIR, 'static')

STATICFILES_DIRS = (
    ('assets', os.path.join(ROOT_DIR, 'assets')),
    ('vendor', os.path.join(ROOT_DIR, 'vendor')),
    ('styles', os.path.join(ROOT_DIR, 'styles')),
)

# The default file storage backend used during the build process
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

import re

IGNORABLE_404_URLS = (
    re.compile(r'\.(php|cgi)$'),
    re.compile(r'^/admin/'),
    re.compile(r'^/phpmyadmin/'),
)

# django-guardian
# http://django-guardian.readthedocs.org/en/v1.2/configuration.html

ANONYMOUS_USER_ID = -1
AUTH_USER_MODEL = 'introduce.CustomUser'

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.stackoverflow.StackoverflowOAuth2',
    'django.contrib.auth.backends.ModelBackend',  # this is default
    'introduce.backends.EmailModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

LOGIN_URL = '/accounts/login/'
LOGOUT_URL = '/accounts/logout/'
LOGIN_REDIRECT_URL = '/'

# https://docs.djangoproject.com/en/1.9/ref/settings/#logging
LOGGING = {
    'version': 1,
    # Setting this to True will disable for eg. preexisting Celery loggers
    'disable_existing_loggers': False,
    'formatters': {
        'short': {
            'format': '%(asctime)s %(levelname)-7s %(thread)-5d %(message)s',
            'datefmt': '%H:%M:%S',
        },
        # this may slow down the app a little, due to
        'verbose': {
            'format': '%(asctime)s %(levelname)-7s %(thread)-5d %(name)s %(filename)s:%(lineno)s | %(funcName)s | %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'heroku': {
            'format': '%(levelname)-7s %(thread)-5d %(name)s %(filename)s:%(lineno)s | %(funcName)s | %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },

    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'short',
            'level': 'DEBUG',
        },
        'mail_admins': {
            'level': 'ERROR',
            'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'sentry': {
            'level': 'ERROR',  # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
        # 'file': {
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'formatter': 'verbose',
        #     'backupCount': 3,
        #     'maxBytes': 4194304,  # 4MB
        # },
    },
    'loggers': {
        # This duplicates Sentry functionality
        # 'django.request': {
        #     'handlers': ['mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': True,
        # },
        'django.template': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'INFO',
        },
        'django.security.DisallowedHost': {
            'handlers': [],
            'propagate': False,
        },
        'suds': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        'factory.generate': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        'factory.containers': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        'dinja2': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        'environ.environ': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'INFO',
        },
        'pil': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        'pil.image': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        },
        # 'django.security.DisallowedHost': {
        #     'handlers': [],
        #     'propagate': False,
        # },
        'raven': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
    },
    'root': {
        'level': 'DEBUG',
        'handlers': ['console'],
    }
}

# Default exception reporter filter class used in case none has been
# specifically assigned to the HttpRequest instance.
DEFAULT_EXCEPTION_REPORTER_FILTER = 'website.debug.SaferExceptionReporterFilter'

DEBUG_TOOLBAR_PATCH_SETTINGS = False
DEBUG_TOOLBAR_CONFIG = {
    # This will break webclient tests as django forces DEBUG=False within tests
    # https://docs.djangoproject.com/en/1.8/topics/testing/advanced/#django.test.runner.DiscoverRunner.setup_test_environment
    "SHOW_TOOLBAR_CALLBACK": 'website.debug.show_debug_toolbar',
}

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    # 'easy_thumbnails.processors.scale_and_crop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)

# django-assets
# http://django-assets.readthedocs.org/en/latest/settings.html

ASSETS_LOAD_PATH = STATIC_ROOT
ASSETS_ROOT = os.path.join(ROOT_DIR, 'assets', "compressed")
ASSETS_DEBUG = env('ASSETS_DEBUG', bool, default=DEBUG)  # Disable when testing compressed file in DEBUG mode
if ASSETS_DEBUG:
    ASSETS_URL = STATIC_URL
    ASSETS_MANIFEST = "json:{}".format(os.path.join(ASSETS_ROOT, "manifest.json"))
else:
    ASSETS_URL = STATIC_URL + "assets/compressed/"
    ASSETS_MANIFEST = "json:{}".format(os.path.join(STATIC_ROOT, 'assets', "compressed", "manifest.json"))
ASSETS_AUTO_BUILD = ASSETS_DEBUG
ASSETS_MODULES = ('website.assets',)

# https://github.com/django-import-export/django-import-export/issues/72#issuecomment-157112447
# IMPORT_EXPORT_TMP_STORAGE_CLASS = 'misc.storage.Utf8TempFolderStorage'

# Celery
# http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html#configuration

CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_ENABLE_UTC = True
CELERY_SEND_TASK_ERROR_EMAILS = True
CELERY_ALWAYS_EAGER = False
CELERY_EAGER_PROPAGATES_EXCEPTIONS = False

# http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html
from celery.schedules import crontab

CELERYBEAT_SCHEDULE = {
    'update-experience-stat': {
        'task': 'resume.tasks.update_all_counters',
        # 'schedule': crontab(hour=2, minute=30)
        # 'schedule': crontab(minute='*/15')  # Execute every 15 minutes
        'schedule': crontab(minute=0, hour=3, day_of_week=1)  # Execute weekly at 3 in the morning
    },
    'update-contry-stat': {
        'task': 'resume.tasks.country_counter_update_all',
        'schedule': crontab(minute=0, hour=8, day_of_week=1)
    },
}

CELERY_QUEUES = {
    "celery": {},
    "linkedin": {},
    "external_postings": {},
    "beats": {
        "queue_arguments": {'x-message-ttl': 120000}
    },
    "counters": {
        "queue_arguments": {'x-message-ttl': 120000}
    },
    "dictionaries": {
        "queue_arguments": {'x-message-ttl': 120000}
    },
    "github": {
        "queue_arguments": {}
    },
    "geocoding": {
        "queue_arguments": {}
    },
}

# Django OAuth Toolkit
# https://django-oauth-toolkit.readthedocs.org/en/latest/rest-framework/getting_started.html#step-2-create-a-simple-api
OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.DjangoModelPermissions',
        # 'rest_framework.permissions.IsAdminUser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'oauth2_provider.ext.rest_framework.OAuth2Authentication',
    ),
    'PAGINATE_BY': 10,
    'DEFAULT_FILTER_BACKENDS': (
        # 'appointments.filters.CoalesceFilterBackend',
    ),
    'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework_json_api.pagination.PageNumberPagination',
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_json_api.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
}

SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.github.e91b58ee4334d2ef34ba',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.stackoverflow.StackoverflowOAuth2',
)

SOCIAL_AUTH_SLUGIFY_USERNAMES = True
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['wizard', ]

# http://psa.matiasaguirre.net/docs/pipeline.html#authentication-pipeline
SOCIAL_AUTH_PIPELINE = (

    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is were emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    # 'social_core.pipeline.social_auth.social_user',
    'introduce.pipeline.social_user',

    # 'introduce.pipeline.load_extra_data',
    'introduce.pipeline.registration_wizard',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    # 'social.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social.pipeline.social_auth.associate_by_email',
    # 'introduce.pipeline.force_login_for_existing_email',

    # Create a user account if we haven't found one yet.
    # 'social.pipeline.user.create_user',

    # Create the record that associated the social account with this user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)

# Sync task testing
# http://docs.celeryproject.org/en/2.5/configuration.html?highlight=celery_always_eager#celery-always-eager

CELERY_ALWAYS_EAGER = env('CELERY_ALWAYS_EAGER', bool, default=False)
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True

ACCOUNT_ACTIVATION_DAYS = 7

SOCIAL_AUTH_STACKOVERFLOW_EXTRA_DATA = ["access_token"]

FASTRATE_MINIMUM_EXP_AGE = 10
FASTRATE_SEARCH_DISTANCE = 100

SPATIALITE_LIBRARY_PATH = 'mod_spatialite'

GRAVATAR_DEFAULT_IMAGE = 'retro'
GOOGLE_ANALYTICS_TRACKING_CODE = env("GOOGLE_ANALYTICS_TRACKING_CODE", default=None)
OPENCAGE_API_KEY = env('OPENCAGE_API_KEY')

BROKER_URL = env("BROKER_URL", default=None) or env("CLOUDAMQP_URL")

SOCIAL_AUTH_LOGIN_ERROR_URL = "/accounts/social/login-error"
SOCIAL_AUTH_RAISE_EXCEPTIONS = env("SOCIAL_AUTH_RAISE_EXCEPTIONS", default=False)

# https://developers.facebook.com/apps/
SOCIAL_AUTH_FACEBOOK_KEY = env("SOCIAL_AUTH_FACEBOOK_KEY")
SOCIAL_AUTH_FACEBOOK_SECRET = env("SOCIAL_AUTH_FACEBOOK_SECRET")

# https://apps.twitter.com/app/new
SOCIAL_AUTH_TWITTER_KEY = env("SOCIAL_AUTH_TWITTER_KEY")
SOCIAL_AUTH_TWITTER_SECRET = env("SOCIAL_AUTH_TWITTER_SECRET")

# https://console.developers.google.com/project
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

# https://github.com/settings/applications/new
SOCIAL_AUTH_GITHUB_KEY = env("SOCIAL_AUTH_GITHUB_KEY")
SOCIAL_AUTH_GITHUB_SECRET = env("SOCIAL_AUTH_GITHUB_SECRET")

# https://www.linkedin.com/developer/apps/new
SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = env("SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY")
SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = env("SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET")

# http://stackapps.com/apps/oauth/register
SOCIAL_AUTH_STACKOVERFLOW_KEY = env("SOCIAL_AUTH_STACKOVERFLOW_KEY", int)
SOCIAL_AUTH_STACKOVERFLOW_API_KEY = env("SOCIAL_AUTH_STACKOVERFLOW_API_KEY")
SOCIAL_AUTH_STACKOVERFLOW_SECRET = env("SOCIAL_AUTH_STACKOVERFLOW_SECRET")

GITHUB_API_TOKEN = env("GITHUB_API_TOKEN")

INTERCOM_APP_ID = env("INTERCOM_APP_ID")
INTERCOM_APP_SECRET = bytearray(env("INTERCOM_APP_SECRET"), 'ascii')

from website import __version__

RAVEN_CONFIG = {
    'dsn': env("RAVEN_CONFIG_DSN"),
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    'release': __version__
}
